var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/index.ts
import { app } from "@getcronit/pylon";

// src/resolvers/booksResolver.ts
import { getContext } from "@getcronit/pylon";

// src/services/booksService.ts
import { eq } from "drizzle-orm";

// src/db/db.ts
import { drizzle } from "drizzle-orm/d1";

// src/db/schema.ts
var schema_exports = {};
__export(schema_exports, {
  authorTable: () => authorTable,
  authorsRelation: () => authorsRelation,
  booksRelation: () => booksRelation,
  booksTable: () => booksTable
});
import { relations } from "drizzle-orm";
import { foreignKey, int, sqliteTable, text } from "drizzle-orm/sqlite-core";
var authorTable = sqliteTable("authors", {
  id: text("id").primaryKey(),
  name: text("name")
});
var authorsRelation = relations(authorTable, ({ many }) => {
  return {
    books: many(booksTable)
  };
});
var booksTable = sqliteTable(
  "books",
  {
    id: text("id").primaryKey(),
    title: text("title"),
    releaseYear: int("release_year"),
    authorId: text("author_id")
  },
  (table) => [
    foreignKey({
      columns: [table.authorId],
      foreignColumns: [authorTable.id]
    })
  ]
);
var booksRelation = relations(booksTable, ({ one }) => {
  return {
    author: one(authorTable, {
      fields: [booksTable.authorId],
      references: [authorTable.id]
    })
  };
});

// src/db/db.ts
function connect(dbClient) {
  return drizzle(dbClient, { schema: schema_exports });
}
async function execute(dbClient, fn) {
  const db = connect(dbClient);
  return fn(db);
}
var db_default = execute;

// src/services/booksService.ts
var BookService = class {
  constructor() {
    this.getBooks = this.getBooks.bind(this);
    this.getBook = this.getBook.bind(this);
    this.createBook = this.createBook.bind(this);
    this.updateBook = this.updateBook.bind(this);
    this.deleteBook = this.deleteBook.bind(this);
  }
  async getBooks(c) {
    const books = await db_default(c.env.DB, (db) => {
      return db.query.booksTable.findMany({
        with: {
          author: true
        }
      });
    });
    return books;
  }
  async getBook(c, bookId) {
    const book = await db_default(c.env.DB, (db) => {
      return db.query.booksTable.findFirst({
        where: (book2, { eq: eq3 }) => eq3(book2.id, bookId),
        with: {
          author: true
        }
      });
    });
    return book;
  }
  async createBook(c, newBook) {
    const bookId = crypto.randomUUID();
    const [book] = await db_default(c.env.DB, (db) => {
      return db.insert(booksTable).values({ ...newBook, id: bookId }).returning();
    });
    return book;
  }
  async updateBook(c, bookId, updatedBook) {
    const [book] = await db_default(c.env.DB, (db) => {
      return db.update(booksTable).set(updatedBook).where(eq(booksTable.id, bookId)).returning();
    });
    return book;
  }
  async deleteBook(c, bookId) {
    const [book] = await db_default(c.env.DB, (db) => {
      return db.delete(booksTable).where(eq(booksTable.id, bookId)).returning();
    });
    return book;
  }
};
var bookService = new BookService();
var booksService_default = bookService;

// src/resolvers/booksResolver.ts
var queryResolvers = {
  books: () => {
    const c = getContext();
    return booksService_default.getBooks(c);
  },
  book: (id) => {
    const c = getContext();
    return booksService_default.getBook(c, id);
  }
};
var mutationResolvers = {
  createBook: (authorId, title, releaseYear) => {
    const c = getContext();
    return booksService_default.createBook(c, { authorId, title, releaseYear });
  },
  updateBook: (id, authorId, title, releaseYear) => {
    const c = getContext();
    return booksService_default.updateBook(c, id, { authorId, title, releaseYear });
  },
  deleteBook: (id) => {
    const c = getContext();
    return booksService_default.deleteBook(c, id);
  }
};

// src/resolvers/authorsResolver.ts
import { getContext as getContext2 } from "@getcronit/pylon";

// src/services/authorsService.ts
import { eq as eq2 } from "drizzle-orm";
var AuthorService = class {
  constructor() {
    this.getAuthors = this.getAuthors.bind(this);
    this.getAuthor = this.getAuthor.bind(this);
    this.createAuthor = this.createAuthor.bind(this);
    this.updateAuthor = this.updateAuthor.bind(this);
    this.deleteAuthor = this.deleteAuthor.bind(this);
  }
  async getAuthors(c) {
    const authors = await db_default(c.env.DB, (db) => {
      return db.query.authorTable.findMany({
        with: {
          books: true
        }
      });
    });
    return authors;
  }
  async getAuthor(c, authorId) {
    const author = await db_default(c.env.DB, (db) => {
      return db.query.authorTable.findFirst({
        where: (author2, { eq: eq3 }) => eq3(author2.id, authorId),
        with: {
          books: true
        }
      });
    });
    return author;
  }
  async createAuthor(c, newAuthor) {
    const authorId = crypto.randomUUID();
    const [author] = await db_default(c.env.DB, (db) => {
      return db.insert(authorTable).values({ ...newAuthor, id: authorId }).returning();
    });
    return author;
  }
  async updateAuthor(c, authorId, updatedAuthor) {
    const [author] = await db_default(c.env.DB, (db) => {
      return db.update(authorTable).set(updatedAuthor).where(eq2(authorTable.id, authorId)).returning();
    });
    return author;
  }
  async deleteAuthor(c, authorId) {
    const [author] = await db_default(c.env.DB, (db) => {
      return db.delete(authorTable).where(eq2(authorTable.id, authorId)).returning();
    });
    return author;
  }
};
var authorService = new AuthorService();
var authorsService_default = authorService;

// src/resolvers/authorsResolver.ts
var queryResolvers2 = {
  authors: () => {
    const c = getContext2();
    return authorsService_default.getAuthors(c);
  },
  author: (id) => {
    const c = getContext2();
    return authorsService_default.getAuthor(c, id);
  }
};
var mutationResolvers2 = {
  createAuthor: (name) => {
    const c = getContext2();
    return authorsService_default.createAuthor(c, { name });
  },
  updateBook: (id, name) => {
    const c = getContext2();
    return authorsService_default.updateAuthor(c, id, { name });
  },
  deleteBook: (id) => {
    const c = getContext2();
    return authorsService_default.deleteAuthor(c, id);
  }
};

// src/index.ts
import { handler as __internalPylonHandler } from "@getcronit/pylon";
var graphql = {
  Query: {
    ...queryResolvers,
    ...queryResolvers2
  },
  Mutation: {
    ...mutationResolvers,
    ...mutationResolvers2
  }
};
var src_default = app;
var __internalPylonConfig = void 0;
try {
  __internalPylonConfig = config;
} catch {
}
app.use(__internalPylonHandler({
  typeDefs: "type Query {\nauthors: [Author!]!\nauthor(id: String!): Author\nbooks: [Book!]!\nbook(id: String!): Book\n}\ntype Author {\nid: String!\nname: String\nbooks: [Book!]!\n}\ntype Book {\nid: String!\ntitle: String\nreleaseYear: Number\nauthorId: String\nauthor: Author\n}\ntype Mutation {\ncreateAuthor(name: String!): Author!\nupdateBook(id: String!, name: String!): Author!\ndeleteBook(id: String!): Author!\ncreateBook(authorId: String!, title: String!, releaseYear: Number): Book!\n}\nscalar ID\nscalar Int\nscalar Float\nscalar Number\nscalar Any\nscalar Void\nscalar Object\nscalar File\nscalar Date\nscalar JSON\nscalar String\nscalar Boolean\n",
  graphql,
  resolvers: {},
  config: __internalPylonConfig
}));
export {
  src_default as default,
  graphql
};
//# sourceMappingURL=data:application/json;base64,
