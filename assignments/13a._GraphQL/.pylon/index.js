var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/index.ts
import { app } from "@getcronit/pylon";

// src/resolvers/usersResolver.ts
import { getContext } from "@getcronit/pylon";

// src/db/db.ts
import { drizzle } from "drizzle-orm/d1";

// src/db/schema.ts
var schema_exports = {};
__export(schema_exports, {
  complainantsRelation: () => complainantsRelation,
  complaintsTable: () => complaintsTable,
  complaintsUserAssociationRelation: () => complaintsUserAssociationRelation,
  complaintsUserAssociationTable: () => complaintsUserAssociationTable,
  roomsRelation: () => roomsRelation,
  roomsTable: () => roomsTable,
  usersRelation: () => usersRelation,
  usersTable: () => usersTable
});
import { relations } from "drizzle-orm";
import { foreignKey, sqliteTable, text } from "drizzle-orm/sqlite-core";
var usersTable = sqliteTable("users", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  socialSecurityNumber: text("social_security_number").notNull()
});
var usersRelation = relations(usersTable, ({ one, many }) => {
  return {
    room: one(roomsTable),
    complaintAssociations: many(complaintsUserAssociationTable)
  };
});
var roomsTable = sqliteTable("rooms", {
  id: text("id").primaryKey(),
  roomNumber: text("room_number").notNull().unique(),
  userId: text("user_id")
}, (table) => [
  foreignKey({
    name: "fk_user_id",
    columns: [table.userId],
    foreignColumns: [usersTable.id]
  })
]);
var roomsRelation = relations(roomsTable, ({ one }) => {
  return {
    user: one(usersTable, {
      fields: [roomsTable.userId],
      references: [usersTable.id]
    })
  };
});
var complaintsTable = sqliteTable("complaints", {
  id: text("id").primaryKey(),
  description: text("description").notNull()
});
var complainantsRelation = relations(complaintsTable, ({ many }) => {
  return {
    userAssociations: many(complaintsUserAssociationTable)
  };
});
var complaintsUserAssociationTable = sqliteTable(
  "complaints_user_association",
  {
    id: text("id").primaryKey(),
    userId: text("user_id").notNull(),
    complaintId: text("complaint_id").notNull(),
    associationKind: text("association_kind", {
      enum: ["complainant", "complainee"]
    }).notNull()
  },
  (table) => [
    foreignKey({
      name: "fk_user_id",
      columns: [table.userId],
      foreignColumns: [usersTable.id]
    }),
    foreignKey({
      name: "fk_complaint_id",
      columns: [table.complaintId],
      foreignColumns: [complaintsTable.id]
    })
  ]
);
var complaintsUserAssociationRelation = relations(complaintsUserAssociationTable, ({ one }) => {
  return {
    user: one(usersTable, {
      fields: [complaintsUserAssociationTable.userId],
      references: [usersTable.id]
    }),
    complaint: one(complaintsTable, {
      fields: [complaintsUserAssociationTable.complaintId],
      references: [complaintsTable.id]
    })
  };
});

// src/db/db.ts
function connect(dbClient) {
  return drizzle(dbClient, { schema: schema_exports });
}
async function execute(dbClient, fn) {
  const db = connect(dbClient);
  return fn(db);
}
var db_default = execute;

// src/services/userService.ts
import { eq } from "drizzle-orm";
var UsersService = class {
  constructor() {
    this.getUsers = this.getUsers.bind(this);
    this.createUser = this.createUser.bind(this);
    this.deleteUser = this.deleteUser.bind(this);
  }
  async getUsers(c) {
    const users = await db_default(c.env.DB, (db) => {
      return db.query.usersTable.findMany({
        with: {
          room: true,
          complaintAssociations: {
            with: {
              user: true,
              complaint: true
            }
          }
        }
      });
    });
    return users;
  }
  async createUser(c, newUser) {
    const userId = crypto.randomUUID();
    const [user] = await db_default(c.env.DB, (db) => {
      return db.insert(usersTable).values({ ...newUser, id: userId }).returning();
    });
    return user;
  }
  async deleteUser(c, userId) {
    const [user] = await db_default(c.env.DB, (db) => {
      return db.delete(usersTable).where(eq(usersTable.id, userId)).returning();
    });
    return user;
  }
};
var usersService = new UsersService();
var userService_default = usersService;

// src/resolvers/usersResolver.ts
var queryResolvers = {
  users: () => {
    const c = getContext();
    return userService_default.getUsers(c);
  }
};
var mutationResolvers = {
  createUser: (name, socialSecurityNumber) => {
    const c = getContext();
    return userService_default.createUser(c, { name, socialSecurityNumber });
  },
  deleteUser: (userId) => {
    const c = getContext();
    return userService_default.deleteUser(c, userId);
  }
};

// src/resolvers/roomsResolver.ts
import { getContext as getContext2 } from "@getcronit/pylon";

// src/services/roomsService.ts
import { eq as eq2, getTableColumns, sql } from "drizzle-orm";
function selectWithRoomNumber(qb, roomNumber) {
  return qb.where(eq2(roomsTable.roomNumber, roomNumber));
}
var RoomsService = class {
  constructor() {
    this.getRooms = this.getRooms.bind(this);
    this.createRoom = this.createRoom.bind(this);
  }
  async getRooms(c, filtering) {
    const rooms = await db_default(c.env.DB, (db) => {
      let dynamicQuery = db.select({
        ...getTableColumns(roomsTable),
        isVacant: sql`${roomsTable.userId} IS Null`.as("is_vacant"),
        user: getTableColumns(usersTable),
        complaints: {
          ...getTableColumns(complaintsTable),
          kind: complaintsUserAssociationTable.associationKind
        }
      }).from(roomsTable).leftJoin(usersTable, eq2(roomsTable.userId, usersTable.id)).leftJoin(
        complaintsUserAssociationTable,
        eq2(complaintsUserAssociationTable.userId, usersTable.id)
      ).leftJoin(
        complaintsTable,
        eq2(complaintsTable.id, complaintsUserAssociationTable.complaintId)
      ).$dynamic();
      if (filtering.roomNumber) {
        dynamicQuery = selectWithRoomNumber(dynamicQuery, filtering.roomNumber);
      }
      return dynamicQuery.execute();
    });
    return rooms;
  }
  async createRoom(c, newRoom) {
    const [room] = await db_default(c.env.DB, (db) => {
      const roomId = crypto.randomUUID();
      return db.insert(roomsTable).values({ ...newRoom, id: roomId }).returning();
    });
    return room;
  }
  async addTenant(c, userId, roomId) {
    const [room] = await db_default(c.env.DB, (db) => {
      return db.update(roomsTable).set({ userId }).where(
        eq2(roomsTable.id, roomId)
      ).returning();
    });
    return room;
  }
};
var roomsService = new RoomsService();
var roomsService_default = roomsService;

// src/resolvers/roomsResolver.ts
var queryResolvers2 = {
  rooms: (roomNumber) => {
    const c = getContext2();
    return roomsService_default.getRooms(c, { roomNumber });
  }
};
var mutationResolvers2 = {
  createRoom: (roomNumber) => {
    const c = getContext2();
    return roomsService_default.createRoom(c, { roomNumber });
  },
  addTenant(userId, roomId) {
    const c = getContext2();
    return roomsService_default.addTenant(c, userId, roomId);
  }
};

// src/services/complaintsService.ts
var ComplaintsService = class {
  constructor() {
    this.getComplaints = this.getComplaints.bind(this);
  }
  async getComplaints(c) {
    const complaints = await db_default(c.env.DB, (db) => {
      return db.query.complaintsTable.findMany({
        with: {
          userAssociations: {
            with: {
              user: true,
              complaint: true
            }
          }
        }
      });
    });
    return complaints;
  }
  async fileComplaint(c, complainantIds, complaineeIds, newComplaint) {
    return db_default(c.env.DB, async (db) => {
      const complaintId = crypto.randomUUID();
      const [complaint] = await db.insert(complaintsTable).values({
        ...newComplaint,
        id: complaintId
      }).returning();
      const complainants = complainantIds.map((complainantId) => ({
        id: crypto.randomUUID(),
        userId: complainantId,
        complaintId: complaint.id,
        associationKind: "complainant"
      }));
      const complainantsReturned = await db.insert(
        complaintsUserAssociationTable
      ).values(complainants).returning();
      const complainees = complaineeIds.map((complaineeId) => ({
        id: crypto.randomUUID(),
        userId: complaineeId,
        complaintId,
        associationKind: "complainee"
      }));
      const complaineesReturned = await db.insert(
        complaintsUserAssociationTable
      ).values(complainees).returning();
      return {
        ...complaint,
        complainants: complainantsReturned,
        complainee: complaineesReturned
      };
    });
  }
};
var complaintsService = new ComplaintsService();
var complaintsService_default = complaintsService;

// src/resolvers/complaintsResolver.ts
import { getContext as getContext3 } from "@getcronit/pylon";
var queryResolvers3 = {
  complaints: () => {
    const c = getContext3();
    return complaintsService_default.getComplaints(c);
  }
};
var mutationResolvers3 = {
  fileComplaint: (description, complainantIds, complaineeIds) => {
    const c = getContext3();
    return complaintsService_default.fileComplaint(c, complainantIds, complaineeIds, {
      description
    });
  }
};

// src/index.ts
import { handler as __internalPylonHandler } from "@getcronit/pylon";
var graphql = {
  Query: {
    ...queryResolvers,
    ...queryResolvers2,
    ...queryResolvers3
  },
  Mutation: {
    ...mutationResolvers,
    ...mutationResolvers2,
    ...mutationResolvers3
  }
};
var src_default = app;
var __internalPylonConfig = void 0;
try {
  __internalPylonConfig = config;
} catch {
}
app.use(__internalPylonHandler({
  typeDefs: "type Query {\ncomplaints: [Complaints!]!\nrooms(roomNumber: String): [Rooms!]!\nusers: [Users!]!\n}\ntype Complaints {\nid: String!\ndescription: String!\nuserAssociations: [UserAssociations!]!\n}\ntype UserAssociations {\nid: String!\nuserId: String!\ncomplaintId: String!\nassociationKind: COMPLAINANT_COMPLAINEE!\nuser: User!\ncomplaint: Complaint!\n}\ntype User {\nid: String!\nname: String!\nsocialSecurityNumber: String!\n}\ntype Complaint {\nid: String!\ndescription: String!\n}\ntype Rooms {\nisVacant: Boolean!\nuser: User_1\ncomplaints: Complaints_1!\nid: String!\nroomNumber: String!\nuserId: String\n}\ntype User_1 {\nid: String!\nname: String!\nsocialSecurityNumber: String!\n}\ntype Complaints_1 {\nkind: COMPLAINANT_COMPLAINEE\nid: String\ndescription: String\n}\ntype Users {\nid: String!\nname: String!\nsocialSecurityNumber: String!\nroom: Room\ncomplaintAssociations: [ComplaintAssociations!]!\n}\ntype Room {\nid: String!\nuserId: String\nroomNumber: String!\n}\ntype ComplaintAssociations {\nid: String!\nuserId: String!\ncomplaintId: String!\nassociationKind: COMPLAINANT_COMPLAINEE!\nuser: User!\ncomplaint: Complaint!\n}\ntype Mutation {\nfileComplaint(description: String!, complainantIds: [String!]!, complaineeIds: [String!]!): FileComplaint!\ncreateRoom(roomNumber: String!): CreateRoom!\naddTenant(userId: String!, roomId: String!): CreateRoom!\ncreateUser(name: String!, socialSecurityNumber: String!): CreateUser!\ndeleteUser(userId: String!): CreateUser!\n}\ntype FileComplaint {\ncomplainants: [Complainants!]!\ncomplainee: [Complainants!]!\nid: String!\ndescription: String!\n}\ntype Complainants {\nid: String!\nuserId: String!\ncomplaintId: String!\nassociationKind: COMPLAINANT_COMPLAINEE!\n}\ntype CreateRoom {\nid: String!\nuserId: String\nroomNumber: String!\n}\ntype CreateUser {\nid: String!\nname: String!\nsocialSecurityNumber: String!\n}\nscalar ID\nscalar Int\nscalar Float\nscalar Number\nscalar Any\nscalar Void\nscalar Object\nscalar File\nscalar Date\nscalar JSON\nscalar String\nscalar Boolean\nenum COMPLAINANT_COMPLAINEE {\n	complainant\n	complainee\n}\n",
  graphql,
  resolvers: {},
  config: __internalPylonConfig
}));
export {
  src_default as default,
  graphql
};
//# sourceMappingURL=data:application/json;base64,
